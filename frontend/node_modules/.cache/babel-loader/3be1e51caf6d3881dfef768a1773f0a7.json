{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nvar findRangesImmutable = require(\"./findRangesImmutable\");\n\nvar Immutable = require(\"immutable\");\n\nvar List = Immutable.List,\n    Repeat = Immutable.Repeat,\n    Record = Immutable.Record;\n\nvar returnTrue = function returnTrue() {\n  return true;\n};\n\nvar defaultLeafRange = {\n  start: null,\n  end: null\n};\nvar LeafRange = Record(defaultLeafRange);\nvar defaultDecoratorRange = {\n  start: null,\n  end: null,\n  decoratorKey: null,\n  leaves: null\n};\nvar DecoratorRange = Record(defaultDecoratorRange);\nvar BlockTree = {\n  /**\n   * Generate a block tree for a given ContentBlock/decorator pair.\n   */\n  generate: function generate(contentState, block, decorator) {\n    var textLength = block.getLength();\n\n    if (!textLength) {\n      return List.of(new DecoratorRange({\n        start: 0,\n        end: 0,\n        decoratorKey: null,\n        leaves: List.of(new LeafRange({\n          start: 0,\n          end: 0\n        }))\n      }));\n    }\n\n    var leafSets = [];\n    var decorations = decorator ? decorator.getDecorations(block, contentState) : List(Repeat(null, textLength));\n    var chars = block.getCharacterList();\n    findRangesImmutable(decorations, areEqual, returnTrue, function (start, end) {\n      leafSets.push(new DecoratorRange({\n        start: start,\n        end: end,\n        decoratorKey: decorations.get(start),\n        leaves: generateLeaves(chars.slice(start, end).toList(), start)\n      }));\n    });\n    return List(leafSets);\n  }\n};\n/**\n * Generate LeafRange records for a given character list.\n */\n\nfunction generateLeaves(characters, offset) {\n  var leaves = [];\n  var inlineStyles = characters.map(function (c) {\n    return c.getStyle();\n  }).toList();\n  findRangesImmutable(inlineStyles, areEqual, returnTrue, function (start, end) {\n    leaves.push(new LeafRange({\n      start: start + offset,\n      end: end + offset\n    }));\n  });\n  return List(leaves);\n}\n\nfunction areEqual(a, b) {\n  return a === b;\n}\n\nmodule.exports = BlockTree;","map":{"version":3,"sources":["/Users/jessebarnes/expenseMaster/frontend/node_modules/draft-js/lib/BlockTree.js"],"names":["findRangesImmutable","require","Immutable","List","Repeat","Record","returnTrue","defaultLeafRange","start","end","LeafRange","defaultDecoratorRange","decoratorKey","leaves","DecoratorRange","BlockTree","generate","contentState","block","decorator","textLength","getLength","of","leafSets","decorations","getDecorations","chars","getCharacterList","areEqual","push","get","generateLeaves","slice","toList","characters","offset","inlineStyles","map","c","getStyle","a","b","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nvar findRangesImmutable = require(\"./findRangesImmutable\");\n\nvar Immutable = require(\"immutable\");\n\nvar List = Immutable.List,\n    Repeat = Immutable.Repeat,\n    Record = Immutable.Record;\n\nvar returnTrue = function returnTrue() {\n  return true;\n};\n\nvar defaultLeafRange = {\n  start: null,\n  end: null\n};\nvar LeafRange = Record(defaultLeafRange);\nvar defaultDecoratorRange = {\n  start: null,\n  end: null,\n  decoratorKey: null,\n  leaves: null\n};\nvar DecoratorRange = Record(defaultDecoratorRange);\nvar BlockTree = {\n  /**\n   * Generate a block tree for a given ContentBlock/decorator pair.\n   */\n  generate: function generate(contentState, block, decorator) {\n    var textLength = block.getLength();\n\n    if (!textLength) {\n      return List.of(new DecoratorRange({\n        start: 0,\n        end: 0,\n        decoratorKey: null,\n        leaves: List.of(new LeafRange({\n          start: 0,\n          end: 0\n        }))\n      }));\n    }\n\n    var leafSets = [];\n    var decorations = decorator ? decorator.getDecorations(block, contentState) : List(Repeat(null, textLength));\n    var chars = block.getCharacterList();\n    findRangesImmutable(decorations, areEqual, returnTrue, function (start, end) {\n      leafSets.push(new DecoratorRange({\n        start: start,\n        end: end,\n        decoratorKey: decorations.get(start),\n        leaves: generateLeaves(chars.slice(start, end).toList(), start)\n      }));\n    });\n    return List(leafSets);\n  }\n};\n/**\n * Generate LeafRange records for a given character list.\n */\n\nfunction generateLeaves(characters, offset) {\n  var leaves = [];\n  var inlineStyles = characters.map(function (c) {\n    return c.getStyle();\n  }).toList();\n  findRangesImmutable(inlineStyles, areEqual, returnTrue, function (start, end) {\n    leaves.push(new LeafRange({\n      start: start + offset,\n      end: end + offset\n    }));\n  });\n  return List(leaves);\n}\n\nfunction areEqual(a, b) {\n  return a === b;\n}\n\nmodule.exports = BlockTree;"]},"metadata":{},"sourceType":"script"}