{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar BlockTree = require(\"./BlockTree\");\n\nvar ContentState = require(\"./ContentState\");\n\nvar EditorBidiService = require(\"./EditorBidiService\");\n\nvar SelectionState = require(\"./SelectionState\");\n\nvar Immutable = require(\"immutable\");\n\nvar OrderedSet = Immutable.OrderedSet,\n    Record = Immutable.Record,\n    Stack = Immutable.Stack; // When configuring an editor, the user can chose to provide or not provide\n// basically all keys. `currentContent` varies, so this type doesn't include it.\n// (See the types defined below.)\n\nvar defaultRecord = {\n  allowUndo: true,\n  currentContent: null,\n  decorator: null,\n  directionMap: null,\n  forceSelection: false,\n  inCompositionMode: false,\n  inlineStyleOverride: null,\n  lastChangeType: null,\n  nativelyRenderedContent: null,\n  redoStack: Stack(),\n  selection: null,\n  treeMap: null,\n  undoStack: Stack()\n};\nvar EditorStateRecord = Record(defaultRecord);\n\nvar EditorState = /*#__PURE__*/function () {\n  EditorState.createEmpty = function createEmpty(decorator) {\n    return EditorState.createWithContent(ContentState.createFromText(''), decorator);\n  };\n\n  EditorState.createWithContent = function createWithContent(contentState, decorator) {\n    if (contentState.getBlockMap().count() === 0) {\n      return EditorState.createEmpty(decorator);\n    }\n\n    var firstKey = contentState.getBlockMap().first().getKey();\n    return EditorState.create({\n      currentContent: contentState,\n      undoStack: Stack(),\n      redoStack: Stack(),\n      decorator: decorator || null,\n      selection: SelectionState.createEmpty(firstKey)\n    });\n  };\n\n  EditorState.create = function create(config) {\n    var currentContent = config.currentContent,\n        decorator = config.decorator;\n\n    var recordConfig = _objectSpread({}, config, {\n      treeMap: generateNewTreeMap(currentContent, decorator),\n      directionMap: EditorBidiService.getDirectionMap(currentContent)\n    });\n\n    return new EditorState(new EditorStateRecord(recordConfig));\n  };\n\n  EditorState.set = function set(editorState, put) {\n    var map = editorState.getImmutable().withMutations(function (state) {\n      var existingDecorator = state.get('decorator');\n      var decorator = existingDecorator;\n\n      if (put.decorator === null) {\n        decorator = null;\n      } else if (put.decorator) {\n        decorator = put.decorator;\n      }\n\n      var newContent = put.currentContent || editorState.getCurrentContent();\n\n      if (decorator !== existingDecorator) {\n        var treeMap = state.get('treeMap');\n        var newTreeMap;\n\n        if (decorator && existingDecorator) {\n          newTreeMap = regenerateTreeForNewDecorator(newContent, newContent.getBlockMap(), treeMap, decorator, existingDecorator);\n        } else {\n          newTreeMap = generateNewTreeMap(newContent, decorator);\n        }\n\n        state.merge({\n          decorator: decorator,\n          treeMap: newTreeMap,\n          nativelyRenderedContent: null\n        });\n        return;\n      }\n\n      var existingContent = editorState.getCurrentContent();\n\n      if (newContent !== existingContent) {\n        state.set('treeMap', regenerateTreeForNewBlocks(editorState, newContent.getBlockMap(), newContent.getEntityMap(), decorator));\n      }\n\n      state.merge(put);\n    });\n    return new EditorState(map);\n  };\n\n  var _proto = EditorState.prototype;\n\n  _proto.toJS = function toJS() {\n    return this.getImmutable().toJS();\n  };\n\n  _proto.getAllowUndo = function getAllowUndo() {\n    return this.getImmutable().get('allowUndo');\n  };\n\n  _proto.getCurrentContent = function getCurrentContent() {\n    return this.getImmutable().get('currentContent');\n  };\n\n  _proto.getUndoStack = function getUndoStack() {\n    return this.getImmutable().get('undoStack');\n  };\n\n  _proto.getRedoStack = function getRedoStack() {\n    return this.getImmutable().get('redoStack');\n  };\n\n  _proto.getSelection = function getSelection() {\n    return this.getImmutable().get('selection');\n  };\n\n  _proto.getDecorator = function getDecorator() {\n    return this.getImmutable().get('decorator');\n  };\n\n  _proto.isInCompositionMode = function isInCompositionMode() {\n    return this.getImmutable().get('inCompositionMode');\n  };\n\n  _proto.mustForceSelection = function mustForceSelection() {\n    return this.getImmutable().get('forceSelection');\n  };\n\n  _proto.getNativelyRenderedContent = function getNativelyRenderedContent() {\n    return this.getImmutable().get('nativelyRenderedContent');\n  };\n\n  _proto.getLastChangeType = function getLastChangeType() {\n    return this.getImmutable().get('lastChangeType');\n  }\n  /**\n   * While editing, the user may apply inline style commands with a collapsed\n   * cursor, intending to type text that adopts the specified style. In this\n   * case, we track the specified style as an \"override\" that takes precedence\n   * over the inline style of the text adjacent to the cursor.\n   *\n   * If null, there is no override in place.\n   */\n  ;\n\n  _proto.getInlineStyleOverride = function getInlineStyleOverride() {\n    return this.getImmutable().get('inlineStyleOverride');\n  };\n\n  EditorState.setInlineStyleOverride = function setInlineStyleOverride(editorState, inlineStyleOverride) {\n    return EditorState.set(editorState, {\n      inlineStyleOverride: inlineStyleOverride\n    });\n  }\n  /**\n   * Get the appropriate inline style for the editor state. If an\n   * override is in place, use it. Otherwise, the current style is\n   * based on the location of the selection state.\n   */\n  ;\n\n  _proto.getCurrentInlineStyle = function getCurrentInlineStyle() {\n    var override = this.getInlineStyleOverride();\n\n    if (override != null) {\n      return override;\n    }\n\n    var content = this.getCurrentContent();\n    var selection = this.getSelection();\n\n    if (selection.isCollapsed()) {\n      return getInlineStyleForCollapsedSelection(content, selection);\n    }\n\n    return getInlineStyleForNonCollapsedSelection(content, selection);\n  };\n\n  _proto.getBlockTree = function getBlockTree(blockKey) {\n    return this.getImmutable().getIn(['treeMap', blockKey]);\n  };\n\n  _proto.isSelectionAtStartOfContent = function isSelectionAtStartOfContent() {\n    var firstKey = this.getCurrentContent().getBlockMap().first().getKey();\n    return this.getSelection().hasEdgeWithin(firstKey, 0, 0);\n  };\n\n  _proto.isSelectionAtEndOfContent = function isSelectionAtEndOfContent() {\n    var content = this.getCurrentContent();\n    var blockMap = content.getBlockMap();\n    var last = blockMap.last();\n    var end = last.getLength();\n    return this.getSelection().hasEdgeWithin(last.getKey(), end, end);\n  };\n\n  _proto.getDirectionMap = function getDirectionMap() {\n    return this.getImmutable().get('directionMap');\n  }\n  /**\n   * Incorporate native DOM selection changes into the EditorState. This\n   * method can be used when we simply want to accept whatever the DOM\n   * has given us to represent selection, and we do not need to re-render\n   * the editor.\n   *\n   * To forcibly move the DOM selection, see `EditorState.forceSelection`.\n   */\n  ;\n\n  EditorState.acceptSelection = function acceptSelection(editorState, selection) {\n    return updateSelection(editorState, selection, false);\n  }\n  /**\n   * At times, we need to force the DOM selection to be where we\n   * need it to be. This can occur when the anchor or focus nodes\n   * are non-text nodes, for instance. In this case, we want to trigger\n   * a re-render of the editor, which in turn forces selection into\n   * the correct place in the DOM. The `forceSelection` method\n   * accomplishes this.\n   *\n   * This method should be used in cases where you need to explicitly\n   * move the DOM selection from one place to another without a change\n   * in ContentState.\n   */\n  ;\n\n  EditorState.forceSelection = function forceSelection(editorState, selection) {\n    if (!selection.getHasFocus()) {\n      selection = selection.set('hasFocus', true);\n    }\n\n    return updateSelection(editorState, selection, true);\n  }\n  /**\n   * Move selection to the end of the editor without forcing focus.\n   */\n  ;\n\n  EditorState.moveSelectionToEnd = function moveSelectionToEnd(editorState) {\n    var content = editorState.getCurrentContent();\n    var lastBlock = content.getLastBlock();\n    var lastKey = lastBlock.getKey();\n    var length = lastBlock.getLength();\n    return EditorState.acceptSelection(editorState, new SelectionState({\n      anchorKey: lastKey,\n      anchorOffset: length,\n      focusKey: lastKey,\n      focusOffset: length,\n      isBackward: false\n    }));\n  }\n  /**\n   * Force focus to the end of the editor. This is useful in scenarios\n   * where we want to programmatically focus the input and it makes sense\n   * to allow the user to continue working seamlessly.\n   */\n  ;\n\n  EditorState.moveFocusToEnd = function moveFocusToEnd(editorState) {\n    var afterSelectionMove = EditorState.moveSelectionToEnd(editorState);\n    return EditorState.forceSelection(afterSelectionMove, afterSelectionMove.getSelection());\n  }\n  /**\n   * Push the current ContentState onto the undo stack if it should be\n   * considered a boundary state, and set the provided ContentState as the\n   * new current content.\n   */\n  ;\n\n  EditorState.push = function push(editorState, contentState, changeType) {\n    var forceSelection = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n    if (editorState.getCurrentContent() === contentState) {\n      return editorState;\n    }\n\n    var directionMap = EditorBidiService.getDirectionMap(contentState, editorState.getDirectionMap());\n\n    if (!editorState.getAllowUndo()) {\n      return EditorState.set(editorState, {\n        currentContent: contentState,\n        directionMap: directionMap,\n        lastChangeType: changeType,\n        selection: contentState.getSelectionAfter(),\n        forceSelection: forceSelection,\n        inlineStyleOverride: null\n      });\n    }\n\n    var selection = editorState.getSelection();\n    var currentContent = editorState.getCurrentContent();\n    var undoStack = editorState.getUndoStack();\n    var newContent = contentState;\n\n    if (selection !== currentContent.getSelectionAfter() || mustBecomeBoundary(editorState, changeType)) {\n      undoStack = undoStack.push(currentContent);\n      newContent = newContent.set('selectionBefore', selection);\n    } else if (changeType === 'insert-characters' || changeType === 'backspace-character' || changeType === 'delete-character') {\n      // Preserve the previous selection.\n      newContent = newContent.set('selectionBefore', currentContent.getSelectionBefore());\n    }\n\n    var inlineStyleOverride = editorState.getInlineStyleOverride(); // Don't discard inline style overrides for the following change types:\n\n    var overrideChangeTypes = ['adjust-depth', 'change-block-type', 'split-block'];\n\n    if (overrideChangeTypes.indexOf(changeType) === -1) {\n      inlineStyleOverride = null;\n    }\n\n    var editorStateChanges = {\n      currentContent: newContent,\n      directionMap: directionMap,\n      undoStack: undoStack,\n      redoStack: Stack(),\n      lastChangeType: changeType,\n      selection: contentState.getSelectionAfter(),\n      forceSelection: forceSelection,\n      inlineStyleOverride: inlineStyleOverride\n    };\n    return EditorState.set(editorState, editorStateChanges);\n  }\n  /**\n   * Make the top ContentState in the undo stack the new current content and\n   * push the current content onto the redo stack.\n   */\n  ;\n\n  EditorState.undo = function undo(editorState) {\n    if (!editorState.getAllowUndo()) {\n      return editorState;\n    }\n\n    var undoStack = editorState.getUndoStack();\n    var newCurrentContent = undoStack.peek();\n\n    if (!newCurrentContent) {\n      return editorState;\n    }\n\n    var currentContent = editorState.getCurrentContent();\n    var directionMap = EditorBidiService.getDirectionMap(newCurrentContent, editorState.getDirectionMap());\n    return EditorState.set(editorState, {\n      currentContent: newCurrentContent,\n      directionMap: directionMap,\n      undoStack: undoStack.shift(),\n      redoStack: editorState.getRedoStack().push(currentContent),\n      forceSelection: true,\n      inlineStyleOverride: null,\n      lastChangeType: 'undo',\n      nativelyRenderedContent: null,\n      selection: currentContent.getSelectionBefore()\n    });\n  }\n  /**\n   * Make the top ContentState in the redo stack the new current content and\n   * push the current content onto the undo stack.\n   */\n  ;\n\n  EditorState.redo = function redo(editorState) {\n    if (!editorState.getAllowUndo()) {\n      return editorState;\n    }\n\n    var redoStack = editorState.getRedoStack();\n    var newCurrentContent = redoStack.peek();\n\n    if (!newCurrentContent) {\n      return editorState;\n    }\n\n    var currentContent = editorState.getCurrentContent();\n    var directionMap = EditorBidiService.getDirectionMap(newCurrentContent, editorState.getDirectionMap());\n    return EditorState.set(editorState, {\n      currentContent: newCurrentContent,\n      directionMap: directionMap,\n      undoStack: editorState.getUndoStack().push(currentContent),\n      redoStack: redoStack.shift(),\n      forceSelection: true,\n      inlineStyleOverride: null,\n      lastChangeType: 'redo',\n      nativelyRenderedContent: null,\n      selection: newCurrentContent.getSelectionAfter()\n    });\n  }\n  /**\n   * Not for public consumption.\n   */\n  ;\n\n  function EditorState(immutable) {\n    _defineProperty(this, \"_immutable\", void 0);\n\n    this._immutable = immutable;\n  }\n  /**\n   * Not for public consumption.\n   */\n\n\n  _proto.getImmutable = function getImmutable() {\n    return this._immutable;\n  };\n\n  return EditorState;\n}();\n/**\n * Set the supplied SelectionState as the new current selection, and set\n * the `force` flag to trigger manual selection placement by the view.\n */\n\n\nfunction updateSelection(editorState, selection, forceSelection) {\n  return EditorState.set(editorState, {\n    selection: selection,\n    forceSelection: forceSelection,\n    nativelyRenderedContent: null,\n    inlineStyleOverride: null\n  });\n}\n/**\n * Regenerate the entire tree map for a given ContentState and decorator.\n * Returns an OrderedMap that maps all available ContentBlock objects.\n */\n\n\nfunction generateNewTreeMap(contentState, decorator) {\n  return contentState.getBlockMap().map(function (block) {\n    return BlockTree.generate(contentState, block, decorator);\n  }).toOrderedMap();\n}\n/**\n * Regenerate tree map objects for all ContentBlocks that have changed\n * between the current editorState and newContent. Returns an OrderedMap\n * with only changed regenerated tree map objects.\n */\n\n\nfunction regenerateTreeForNewBlocks(editorState, newBlockMap, newEntityMap, decorator) {\n  var contentState = editorState.getCurrentContent().set('entityMap', newEntityMap);\n  var prevBlockMap = contentState.getBlockMap();\n  var prevTreeMap = editorState.getImmutable().get('treeMap');\n  return prevTreeMap.merge(newBlockMap.toSeq().filter(function (block, key) {\n    return block !== prevBlockMap.get(key);\n  }).map(function (block) {\n    return BlockTree.generate(contentState, block, decorator);\n  }));\n}\n/**\n * Generate tree map objects for a new decorator object, preserving any\n * decorations that are unchanged from the previous decorator.\n *\n * Note that in order for this to perform optimally, decoration Lists for\n * decorators should be preserved when possible to allow for direct immutable\n * List comparison.\n */\n\n\nfunction regenerateTreeForNewDecorator(content, blockMap, previousTreeMap, decorator, existingDecorator) {\n  return previousTreeMap.merge(blockMap.toSeq().filter(function (block) {\n    return decorator.getDecorations(block, content) !== existingDecorator.getDecorations(block, content);\n  }).map(function (block) {\n    return BlockTree.generate(content, block, decorator);\n  }));\n}\n/**\n * Return whether a change should be considered a boundary state, given\n * the previous change type. Allows us to discard potential boundary states\n * during standard typing or deletion behavior.\n */\n\n\nfunction mustBecomeBoundary(editorState, changeType) {\n  var lastChangeType = editorState.getLastChangeType();\n  return changeType !== lastChangeType || changeType !== 'insert-characters' && changeType !== 'backspace-character' && changeType !== 'delete-character';\n}\n\nfunction getInlineStyleForCollapsedSelection(content, selection) {\n  var startKey = selection.getStartKey();\n  var startOffset = selection.getStartOffset();\n  var startBlock = content.getBlockForKey(startKey); // If the cursor is not at the start of the block, look backward to\n  // preserve the style of the preceding character.\n\n  if (startOffset > 0) {\n    return startBlock.getInlineStyleAt(startOffset - 1);\n  } // The caret is at position zero in this block. If the block has any\n  // text at all, use the style of the first character.\n\n\n  if (startBlock.getLength()) {\n    return startBlock.getInlineStyleAt(0);\n  } // Otherwise, look upward in the document to find the closest character.\n\n\n  return lookUpwardForInlineStyle(content, startKey);\n}\n\nfunction getInlineStyleForNonCollapsedSelection(content, selection) {\n  var startKey = selection.getStartKey();\n  var startOffset = selection.getStartOffset();\n  var startBlock = content.getBlockForKey(startKey); // If there is a character just inside the selection, use its style.\n\n  if (startOffset < startBlock.getLength()) {\n    return startBlock.getInlineStyleAt(startOffset);\n  } // Check if the selection at the end of a non-empty block. Use the last\n  // style in the block.\n\n\n  if (startOffset > 0) {\n    return startBlock.getInlineStyleAt(startOffset - 1);\n  } // Otherwise, look upward in the document to find the closest character.\n\n\n  return lookUpwardForInlineStyle(content, startKey);\n}\n\nfunction lookUpwardForInlineStyle(content, fromKey) {\n  var lastNonEmpty = content.getBlockMap().reverse().skipUntil(function (_, k) {\n    return k === fromKey;\n  }).skip(1).skipUntil(function (block, _) {\n    return block.getLength();\n  }).first();\n\n  if (lastNonEmpty) {\n    return lastNonEmpty.getInlineStyleAt(lastNonEmpty.getLength() - 1);\n  }\n\n  return OrderedSet();\n}\n\nmodule.exports = EditorState;","map":{"version":3,"sources":["/Users/jessebarnes/expenseMaster/frontend/node_modules/draft-js/lib/EditorState.js"],"names":["_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","obj","value","defineProperty","configurable","writable","BlockTree","require","ContentState","EditorBidiService","SelectionState","Immutable","OrderedSet","Record","Stack","defaultRecord","allowUndo","currentContent","decorator","directionMap","forceSelection","inCompositionMode","inlineStyleOverride","lastChangeType","nativelyRenderedContent","redoStack","selection","treeMap","undoStack","EditorStateRecord","EditorState","createEmpty","createWithContent","createFromText","contentState","getBlockMap","count","firstKey","first","getKey","create","config","recordConfig","generateNewTreeMap","getDirectionMap","set","editorState","put","map","getImmutable","withMutations","state","existingDecorator","get","newContent","getCurrentContent","newTreeMap","regenerateTreeForNewDecorator","merge","existingContent","regenerateTreeForNewBlocks","getEntityMap","_proto","prototype","toJS","getAllowUndo","getUndoStack","getRedoStack","getSelection","getDecorator","isInCompositionMode","mustForceSelection","getNativelyRenderedContent","getLastChangeType","getInlineStyleOverride","setInlineStyleOverride","getCurrentInlineStyle","override","content","isCollapsed","getInlineStyleForCollapsedSelection","getInlineStyleForNonCollapsedSelection","getBlockTree","blockKey","getIn","isSelectionAtStartOfContent","hasEdgeWithin","isSelectionAtEndOfContent","blockMap","last","end","getLength","acceptSelection","updateSelection","getHasFocus","moveSelectionToEnd","lastBlock","getLastBlock","lastKey","anchorKey","anchorOffset","focusKey","focusOffset","isBackward","moveFocusToEnd","afterSelectionMove","push","changeType","undefined","getSelectionAfter","mustBecomeBoundary","getSelectionBefore","overrideChangeTypes","indexOf","editorStateChanges","undo","newCurrentContent","peek","shift","redo","immutable","_immutable","block","generate","toOrderedMap","newBlockMap","newEntityMap","prevBlockMap","prevTreeMap","toSeq","previousTreeMap","getDecorations","startKey","getStartKey","startOffset","getStartOffset","startBlock","getBlockForKey","getInlineStyleAt","lookUpwardForInlineStyle","fromKey","lastNonEmpty","reverse","skipUntil","_","k","skip","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar BlockTree = require(\"./BlockTree\");\n\nvar ContentState = require(\"./ContentState\");\n\nvar EditorBidiService = require(\"./EditorBidiService\");\n\nvar SelectionState = require(\"./SelectionState\");\n\nvar Immutable = require(\"immutable\");\n\nvar OrderedSet = Immutable.OrderedSet,\n    Record = Immutable.Record,\n    Stack = Immutable.Stack; // When configuring an editor, the user can chose to provide or not provide\n// basically all keys. `currentContent` varies, so this type doesn't include it.\n// (See the types defined below.)\n\nvar defaultRecord = {\n  allowUndo: true,\n  currentContent: null,\n  decorator: null,\n  directionMap: null,\n  forceSelection: false,\n  inCompositionMode: false,\n  inlineStyleOverride: null,\n  lastChangeType: null,\n  nativelyRenderedContent: null,\n  redoStack: Stack(),\n  selection: null,\n  treeMap: null,\n  undoStack: Stack()\n};\nvar EditorStateRecord = Record(defaultRecord);\n\nvar EditorState =\n/*#__PURE__*/\nfunction () {\n  EditorState.createEmpty = function createEmpty(decorator) {\n    return EditorState.createWithContent(ContentState.createFromText(''), decorator);\n  };\n\n  EditorState.createWithContent = function createWithContent(contentState, decorator) {\n    if (contentState.getBlockMap().count() === 0) {\n      return EditorState.createEmpty(decorator);\n    }\n\n    var firstKey = contentState.getBlockMap().first().getKey();\n    return EditorState.create({\n      currentContent: contentState,\n      undoStack: Stack(),\n      redoStack: Stack(),\n      decorator: decorator || null,\n      selection: SelectionState.createEmpty(firstKey)\n    });\n  };\n\n  EditorState.create = function create(config) {\n    var currentContent = config.currentContent,\n        decorator = config.decorator;\n\n    var recordConfig = _objectSpread({}, config, {\n      treeMap: generateNewTreeMap(currentContent, decorator),\n      directionMap: EditorBidiService.getDirectionMap(currentContent)\n    });\n\n    return new EditorState(new EditorStateRecord(recordConfig));\n  };\n\n  EditorState.set = function set(editorState, put) {\n    var map = editorState.getImmutable().withMutations(function (state) {\n      var existingDecorator = state.get('decorator');\n      var decorator = existingDecorator;\n\n      if (put.decorator === null) {\n        decorator = null;\n      } else if (put.decorator) {\n        decorator = put.decorator;\n      }\n\n      var newContent = put.currentContent || editorState.getCurrentContent();\n\n      if (decorator !== existingDecorator) {\n        var treeMap = state.get('treeMap');\n        var newTreeMap;\n\n        if (decorator && existingDecorator) {\n          newTreeMap = regenerateTreeForNewDecorator(newContent, newContent.getBlockMap(), treeMap, decorator, existingDecorator);\n        } else {\n          newTreeMap = generateNewTreeMap(newContent, decorator);\n        }\n\n        state.merge({\n          decorator: decorator,\n          treeMap: newTreeMap,\n          nativelyRenderedContent: null\n        });\n        return;\n      }\n\n      var existingContent = editorState.getCurrentContent();\n\n      if (newContent !== existingContent) {\n        state.set('treeMap', regenerateTreeForNewBlocks(editorState, newContent.getBlockMap(), newContent.getEntityMap(), decorator));\n      }\n\n      state.merge(put);\n    });\n    return new EditorState(map);\n  };\n\n  var _proto = EditorState.prototype;\n\n  _proto.toJS = function toJS() {\n    return this.getImmutable().toJS();\n  };\n\n  _proto.getAllowUndo = function getAllowUndo() {\n    return this.getImmutable().get('allowUndo');\n  };\n\n  _proto.getCurrentContent = function getCurrentContent() {\n    return this.getImmutable().get('currentContent');\n  };\n\n  _proto.getUndoStack = function getUndoStack() {\n    return this.getImmutable().get('undoStack');\n  };\n\n  _proto.getRedoStack = function getRedoStack() {\n    return this.getImmutable().get('redoStack');\n  };\n\n  _proto.getSelection = function getSelection() {\n    return this.getImmutable().get('selection');\n  };\n\n  _proto.getDecorator = function getDecorator() {\n    return this.getImmutable().get('decorator');\n  };\n\n  _proto.isInCompositionMode = function isInCompositionMode() {\n    return this.getImmutable().get('inCompositionMode');\n  };\n\n  _proto.mustForceSelection = function mustForceSelection() {\n    return this.getImmutable().get('forceSelection');\n  };\n\n  _proto.getNativelyRenderedContent = function getNativelyRenderedContent() {\n    return this.getImmutable().get('nativelyRenderedContent');\n  };\n\n  _proto.getLastChangeType = function getLastChangeType() {\n    return this.getImmutable().get('lastChangeType');\n  }\n  /**\n   * While editing, the user may apply inline style commands with a collapsed\n   * cursor, intending to type text that adopts the specified style. In this\n   * case, we track the specified style as an \"override\" that takes precedence\n   * over the inline style of the text adjacent to the cursor.\n   *\n   * If null, there is no override in place.\n   */\n  ;\n\n  _proto.getInlineStyleOverride = function getInlineStyleOverride() {\n    return this.getImmutable().get('inlineStyleOverride');\n  };\n\n  EditorState.setInlineStyleOverride = function setInlineStyleOverride(editorState, inlineStyleOverride) {\n    return EditorState.set(editorState, {\n      inlineStyleOverride: inlineStyleOverride\n    });\n  }\n  /**\n   * Get the appropriate inline style for the editor state. If an\n   * override is in place, use it. Otherwise, the current style is\n   * based on the location of the selection state.\n   */\n  ;\n\n  _proto.getCurrentInlineStyle = function getCurrentInlineStyle() {\n    var override = this.getInlineStyleOverride();\n\n    if (override != null) {\n      return override;\n    }\n\n    var content = this.getCurrentContent();\n    var selection = this.getSelection();\n\n    if (selection.isCollapsed()) {\n      return getInlineStyleForCollapsedSelection(content, selection);\n    }\n\n    return getInlineStyleForNonCollapsedSelection(content, selection);\n  };\n\n  _proto.getBlockTree = function getBlockTree(blockKey) {\n    return this.getImmutable().getIn(['treeMap', blockKey]);\n  };\n\n  _proto.isSelectionAtStartOfContent = function isSelectionAtStartOfContent() {\n    var firstKey = this.getCurrentContent().getBlockMap().first().getKey();\n    return this.getSelection().hasEdgeWithin(firstKey, 0, 0);\n  };\n\n  _proto.isSelectionAtEndOfContent = function isSelectionAtEndOfContent() {\n    var content = this.getCurrentContent();\n    var blockMap = content.getBlockMap();\n    var last = blockMap.last();\n    var end = last.getLength();\n    return this.getSelection().hasEdgeWithin(last.getKey(), end, end);\n  };\n\n  _proto.getDirectionMap = function getDirectionMap() {\n    return this.getImmutable().get('directionMap');\n  }\n  /**\n   * Incorporate native DOM selection changes into the EditorState. This\n   * method can be used when we simply want to accept whatever the DOM\n   * has given us to represent selection, and we do not need to re-render\n   * the editor.\n   *\n   * To forcibly move the DOM selection, see `EditorState.forceSelection`.\n   */\n  ;\n\n  EditorState.acceptSelection = function acceptSelection(editorState, selection) {\n    return updateSelection(editorState, selection, false);\n  }\n  /**\n   * At times, we need to force the DOM selection to be where we\n   * need it to be. This can occur when the anchor or focus nodes\n   * are non-text nodes, for instance. In this case, we want to trigger\n   * a re-render of the editor, which in turn forces selection into\n   * the correct place in the DOM. The `forceSelection` method\n   * accomplishes this.\n   *\n   * This method should be used in cases where you need to explicitly\n   * move the DOM selection from one place to another without a change\n   * in ContentState.\n   */\n  ;\n\n  EditorState.forceSelection = function forceSelection(editorState, selection) {\n    if (!selection.getHasFocus()) {\n      selection = selection.set('hasFocus', true);\n    }\n\n    return updateSelection(editorState, selection, true);\n  }\n  /**\n   * Move selection to the end of the editor without forcing focus.\n   */\n  ;\n\n  EditorState.moveSelectionToEnd = function moveSelectionToEnd(editorState) {\n    var content = editorState.getCurrentContent();\n    var lastBlock = content.getLastBlock();\n    var lastKey = lastBlock.getKey();\n    var length = lastBlock.getLength();\n    return EditorState.acceptSelection(editorState, new SelectionState({\n      anchorKey: lastKey,\n      anchorOffset: length,\n      focusKey: lastKey,\n      focusOffset: length,\n      isBackward: false\n    }));\n  }\n  /**\n   * Force focus to the end of the editor. This is useful in scenarios\n   * where we want to programmatically focus the input and it makes sense\n   * to allow the user to continue working seamlessly.\n   */\n  ;\n\n  EditorState.moveFocusToEnd = function moveFocusToEnd(editorState) {\n    var afterSelectionMove = EditorState.moveSelectionToEnd(editorState);\n    return EditorState.forceSelection(afterSelectionMove, afterSelectionMove.getSelection());\n  }\n  /**\n   * Push the current ContentState onto the undo stack if it should be\n   * considered a boundary state, and set the provided ContentState as the\n   * new current content.\n   */\n  ;\n\n  EditorState.push = function push(editorState, contentState, changeType) {\n    var forceSelection = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n    if (editorState.getCurrentContent() === contentState) {\n      return editorState;\n    }\n\n    var directionMap = EditorBidiService.getDirectionMap(contentState, editorState.getDirectionMap());\n\n    if (!editorState.getAllowUndo()) {\n      return EditorState.set(editorState, {\n        currentContent: contentState,\n        directionMap: directionMap,\n        lastChangeType: changeType,\n        selection: contentState.getSelectionAfter(),\n        forceSelection: forceSelection,\n        inlineStyleOverride: null\n      });\n    }\n\n    var selection = editorState.getSelection();\n    var currentContent = editorState.getCurrentContent();\n    var undoStack = editorState.getUndoStack();\n    var newContent = contentState;\n\n    if (selection !== currentContent.getSelectionAfter() || mustBecomeBoundary(editorState, changeType)) {\n      undoStack = undoStack.push(currentContent);\n      newContent = newContent.set('selectionBefore', selection);\n    } else if (changeType === 'insert-characters' || changeType === 'backspace-character' || changeType === 'delete-character') {\n      // Preserve the previous selection.\n      newContent = newContent.set('selectionBefore', currentContent.getSelectionBefore());\n    }\n\n    var inlineStyleOverride = editorState.getInlineStyleOverride(); // Don't discard inline style overrides for the following change types:\n\n    var overrideChangeTypes = ['adjust-depth', 'change-block-type', 'split-block'];\n\n    if (overrideChangeTypes.indexOf(changeType) === -1) {\n      inlineStyleOverride = null;\n    }\n\n    var editorStateChanges = {\n      currentContent: newContent,\n      directionMap: directionMap,\n      undoStack: undoStack,\n      redoStack: Stack(),\n      lastChangeType: changeType,\n      selection: contentState.getSelectionAfter(),\n      forceSelection: forceSelection,\n      inlineStyleOverride: inlineStyleOverride\n    };\n    return EditorState.set(editorState, editorStateChanges);\n  }\n  /**\n   * Make the top ContentState in the undo stack the new current content and\n   * push the current content onto the redo stack.\n   */\n  ;\n\n  EditorState.undo = function undo(editorState) {\n    if (!editorState.getAllowUndo()) {\n      return editorState;\n    }\n\n    var undoStack = editorState.getUndoStack();\n    var newCurrentContent = undoStack.peek();\n\n    if (!newCurrentContent) {\n      return editorState;\n    }\n\n    var currentContent = editorState.getCurrentContent();\n    var directionMap = EditorBidiService.getDirectionMap(newCurrentContent, editorState.getDirectionMap());\n    return EditorState.set(editorState, {\n      currentContent: newCurrentContent,\n      directionMap: directionMap,\n      undoStack: undoStack.shift(),\n      redoStack: editorState.getRedoStack().push(currentContent),\n      forceSelection: true,\n      inlineStyleOverride: null,\n      lastChangeType: 'undo',\n      nativelyRenderedContent: null,\n      selection: currentContent.getSelectionBefore()\n    });\n  }\n  /**\n   * Make the top ContentState in the redo stack the new current content and\n   * push the current content onto the undo stack.\n   */\n  ;\n\n  EditorState.redo = function redo(editorState) {\n    if (!editorState.getAllowUndo()) {\n      return editorState;\n    }\n\n    var redoStack = editorState.getRedoStack();\n    var newCurrentContent = redoStack.peek();\n\n    if (!newCurrentContent) {\n      return editorState;\n    }\n\n    var currentContent = editorState.getCurrentContent();\n    var directionMap = EditorBidiService.getDirectionMap(newCurrentContent, editorState.getDirectionMap());\n    return EditorState.set(editorState, {\n      currentContent: newCurrentContent,\n      directionMap: directionMap,\n      undoStack: editorState.getUndoStack().push(currentContent),\n      redoStack: redoStack.shift(),\n      forceSelection: true,\n      inlineStyleOverride: null,\n      lastChangeType: 'redo',\n      nativelyRenderedContent: null,\n      selection: newCurrentContent.getSelectionAfter()\n    });\n  }\n  /**\n   * Not for public consumption.\n   */\n  ;\n\n  function EditorState(immutable) {\n    _defineProperty(this, \"_immutable\", void 0);\n\n    this._immutable = immutable;\n  }\n  /**\n   * Not for public consumption.\n   */\n\n\n  _proto.getImmutable = function getImmutable() {\n    return this._immutable;\n  };\n\n  return EditorState;\n}();\n/**\n * Set the supplied SelectionState as the new current selection, and set\n * the `force` flag to trigger manual selection placement by the view.\n */\n\n\nfunction updateSelection(editorState, selection, forceSelection) {\n  return EditorState.set(editorState, {\n    selection: selection,\n    forceSelection: forceSelection,\n    nativelyRenderedContent: null,\n    inlineStyleOverride: null\n  });\n}\n/**\n * Regenerate the entire tree map for a given ContentState and decorator.\n * Returns an OrderedMap that maps all available ContentBlock objects.\n */\n\n\nfunction generateNewTreeMap(contentState, decorator) {\n  return contentState.getBlockMap().map(function (block) {\n    return BlockTree.generate(contentState, block, decorator);\n  }).toOrderedMap();\n}\n/**\n * Regenerate tree map objects for all ContentBlocks that have changed\n * between the current editorState and newContent. Returns an OrderedMap\n * with only changed regenerated tree map objects.\n */\n\n\nfunction regenerateTreeForNewBlocks(editorState, newBlockMap, newEntityMap, decorator) {\n  var contentState = editorState.getCurrentContent().set('entityMap', newEntityMap);\n  var prevBlockMap = contentState.getBlockMap();\n  var prevTreeMap = editorState.getImmutable().get('treeMap');\n  return prevTreeMap.merge(newBlockMap.toSeq().filter(function (block, key) {\n    return block !== prevBlockMap.get(key);\n  }).map(function (block) {\n    return BlockTree.generate(contentState, block, decorator);\n  }));\n}\n/**\n * Generate tree map objects for a new decorator object, preserving any\n * decorations that are unchanged from the previous decorator.\n *\n * Note that in order for this to perform optimally, decoration Lists for\n * decorators should be preserved when possible to allow for direct immutable\n * List comparison.\n */\n\n\nfunction regenerateTreeForNewDecorator(content, blockMap, previousTreeMap, decorator, existingDecorator) {\n  return previousTreeMap.merge(blockMap.toSeq().filter(function (block) {\n    return decorator.getDecorations(block, content) !== existingDecorator.getDecorations(block, content);\n  }).map(function (block) {\n    return BlockTree.generate(content, block, decorator);\n  }));\n}\n/**\n * Return whether a change should be considered a boundary state, given\n * the previous change type. Allows us to discard potential boundary states\n * during standard typing or deletion behavior.\n */\n\n\nfunction mustBecomeBoundary(editorState, changeType) {\n  var lastChangeType = editorState.getLastChangeType();\n  return changeType !== lastChangeType || changeType !== 'insert-characters' && changeType !== 'backspace-character' && changeType !== 'delete-character';\n}\n\nfunction getInlineStyleForCollapsedSelection(content, selection) {\n  var startKey = selection.getStartKey();\n  var startOffset = selection.getStartOffset();\n  var startBlock = content.getBlockForKey(startKey); // If the cursor is not at the start of the block, look backward to\n  // preserve the style of the preceding character.\n\n  if (startOffset > 0) {\n    return startBlock.getInlineStyleAt(startOffset - 1);\n  } // The caret is at position zero in this block. If the block has any\n  // text at all, use the style of the first character.\n\n\n  if (startBlock.getLength()) {\n    return startBlock.getInlineStyleAt(0);\n  } // Otherwise, look upward in the document to find the closest character.\n\n\n  return lookUpwardForInlineStyle(content, startKey);\n}\n\nfunction getInlineStyleForNonCollapsedSelection(content, selection) {\n  var startKey = selection.getStartKey();\n  var startOffset = selection.getStartOffset();\n  var startBlock = content.getBlockForKey(startKey); // If there is a character just inside the selection, use its style.\n\n  if (startOffset < startBlock.getLength()) {\n    return startBlock.getInlineStyleAt(startOffset);\n  } // Check if the selection at the end of a non-empty block. Use the last\n  // style in the block.\n\n\n  if (startOffset > 0) {\n    return startBlock.getInlineStyleAt(startOffset - 1);\n  } // Otherwise, look upward in the document to find the closest character.\n\n\n  return lookUpwardForInlineStyle(content, startKey);\n}\n\nfunction lookUpwardForInlineStyle(content, fromKey) {\n  var lastNonEmpty = content.getBlockMap().reverse().skipUntil(function (_, k) {\n    return k === fromKey;\n  }).skip(1).skipUntil(function (block, _) {\n    return block.getLength();\n  }).first();\n\n  if (lastNonEmpty) {\n    return lastNonEmpty.getInlineStyleAt(lastNonEmpty.getLength() - 1);\n  }\n\n  return OrderedSet();\n}\n\nmodule.exports = EditorState;"]},"metadata":{},"sourceType":"script"}