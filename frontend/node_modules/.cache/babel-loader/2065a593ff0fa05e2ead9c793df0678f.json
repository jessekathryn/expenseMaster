{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar BlockMapBuilder = require(\"./BlockMapBuilder\");\n\nvar CharacterMetadata = require(\"./CharacterMetadata\");\n\nvar ContentBlock = require(\"./ContentBlock\");\n\nvar ContentBlockNode = require(\"./ContentBlockNode\");\n\nvar DraftEntity = require(\"./DraftEntity\");\n\nvar SelectionState = require(\"./SelectionState\");\n\nvar generateRandomKey = require(\"./generateRandomKey\");\n\nvar gkx = require(\"./gkx\");\n\nvar Immutable = require(\"immutable\");\n\nvar sanitizeDraftText = require(\"./sanitizeDraftText\");\n\nvar List = Immutable.List,\n    Record = Immutable.Record,\n    Repeat = Immutable.Repeat;\nvar defaultRecord = {\n  entityMap: null,\n  blockMap: null,\n  selectionBefore: null,\n  selectionAfter: null\n};\nvar ContentStateRecord = Record(defaultRecord);\n\nvar ContentState = /*#__PURE__*/function (_ContentStateRecord) {\n  _inheritsLoose(ContentState, _ContentStateRecord);\n\n  function ContentState() {\n    return _ContentStateRecord.apply(this, arguments) || this;\n  }\n\n  var _proto = ContentState.prototype;\n\n  _proto.getEntityMap = function getEntityMap() {\n    // TODO: update this when we fully remove DraftEntity\n    return DraftEntity;\n  };\n\n  _proto.getBlockMap = function getBlockMap() {\n    return this.get('blockMap');\n  };\n\n  _proto.getSelectionBefore = function getSelectionBefore() {\n    return this.get('selectionBefore');\n  };\n\n  _proto.getSelectionAfter = function getSelectionAfter() {\n    return this.get('selectionAfter');\n  };\n\n  _proto.getBlockForKey = function getBlockForKey(key) {\n    var block = this.getBlockMap().get(key);\n    return block;\n  };\n\n  _proto.getKeyBefore = function getKeyBefore(key) {\n    return this.getBlockMap().reverse().keySeq().skipUntil(function (v) {\n      return v === key;\n    }).skip(1).first();\n  };\n\n  _proto.getKeyAfter = function getKeyAfter(key) {\n    return this.getBlockMap().keySeq().skipUntil(function (v) {\n      return v === key;\n    }).skip(1).first();\n  };\n\n  _proto.getBlockAfter = function getBlockAfter(key) {\n    return this.getBlockMap().skipUntil(function (_, k) {\n      return k === key;\n    }).skip(1).first();\n  };\n\n  _proto.getBlockBefore = function getBlockBefore(key) {\n    return this.getBlockMap().reverse().skipUntil(function (_, k) {\n      return k === key;\n    }).skip(1).first();\n  };\n\n  _proto.getBlocksAsArray = function getBlocksAsArray() {\n    return this.getBlockMap().toArray();\n  };\n\n  _proto.getFirstBlock = function getFirstBlock() {\n    return this.getBlockMap().first();\n  };\n\n  _proto.getLastBlock = function getLastBlock() {\n    return this.getBlockMap().last();\n  };\n\n  _proto.getPlainText = function getPlainText(delimiter) {\n    return this.getBlockMap().map(function (block) {\n      return block ? block.getText() : '';\n    }).join(delimiter || '\\n');\n  };\n\n  _proto.getLastCreatedEntityKey = function getLastCreatedEntityKey() {\n    // TODO: update this when we fully remove DraftEntity\n    return DraftEntity.__getLastCreatedEntityKey();\n  };\n\n  _proto.hasText = function hasText() {\n    var blockMap = this.getBlockMap();\n    return blockMap.size > 1 || // make sure that there are no zero width space chars\n    escape(blockMap.first().getText()).replace(/%u200B/g, '').length > 0;\n  };\n\n  _proto.createEntity = function createEntity(type, mutability, data) {\n    // TODO: update this when we fully remove DraftEntity\n    DraftEntity.__create(type, mutability, data);\n\n    return this;\n  };\n\n  _proto.mergeEntityData = function mergeEntityData(key, toMerge) {\n    // TODO: update this when we fully remove DraftEntity\n    DraftEntity.__mergeData(key, toMerge);\n\n    return this;\n  };\n\n  _proto.replaceEntityData = function replaceEntityData(key, newData) {\n    // TODO: update this when we fully remove DraftEntity\n    DraftEntity.__replaceData(key, newData);\n\n    return this;\n  };\n\n  _proto.addEntity = function addEntity(instance) {\n    // TODO: update this when we fully remove DraftEntity\n    DraftEntity.__add(instance);\n\n    return this;\n  };\n\n  _proto.getEntity = function getEntity(key) {\n    // TODO: update this when we fully remove DraftEntity\n    return DraftEntity.__get(key);\n  };\n\n  ContentState.createFromBlockArray = function createFromBlockArray( // TODO: update flow type when we completely deprecate the old entity API\n  blocks, entityMap) {\n    // TODO: remove this when we completely deprecate the old entity API\n    var theBlocks = Array.isArray(blocks) ? blocks : blocks.contentBlocks;\n    var blockMap = BlockMapBuilder.createFromArray(theBlocks);\n    var selectionState = blockMap.isEmpty() ? new SelectionState() : SelectionState.createEmpty(blockMap.first().getKey());\n    return new ContentState({\n      blockMap: blockMap,\n      entityMap: entityMap || DraftEntity,\n      selectionBefore: selectionState,\n      selectionAfter: selectionState\n    });\n  };\n\n  ContentState.createFromText = function createFromText(text) {\n    var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /\\r\\n?|\\n/g;\n    var strings = text.split(delimiter);\n    var blocks = strings.map(function (block) {\n      block = sanitizeDraftText(block);\n      var ContentBlockNodeRecord = gkx('draft_tree_data_support') ? ContentBlockNode : ContentBlock;\n      return new ContentBlockNodeRecord({\n        key: generateRandomKey(),\n        text: block,\n        type: 'unstyled',\n        characterList: List(Repeat(CharacterMetadata.EMPTY, block.length))\n      });\n    });\n    return ContentState.createFromBlockArray(blocks);\n  };\n\n  return ContentState;\n}(ContentStateRecord);\n\nmodule.exports = ContentState;","map":{"version":3,"sources":["/Users/jessebarnes/expenseMaster/frontend/node_modules/draft-js/lib/ContentState.js"],"names":["_inheritsLoose","subClass","superClass","prototype","Object","create","constructor","__proto__","BlockMapBuilder","require","CharacterMetadata","ContentBlock","ContentBlockNode","DraftEntity","SelectionState","generateRandomKey","gkx","Immutable","sanitizeDraftText","List","Record","Repeat","defaultRecord","entityMap","blockMap","selectionBefore","selectionAfter","ContentStateRecord","ContentState","_ContentStateRecord","apply","arguments","_proto","getEntityMap","getBlockMap","get","getSelectionBefore","getSelectionAfter","getBlockForKey","key","block","getKeyBefore","reverse","keySeq","skipUntil","v","skip","first","getKeyAfter","getBlockAfter","_","k","getBlockBefore","getBlocksAsArray","toArray","getFirstBlock","getLastBlock","last","getPlainText","delimiter","map","getText","join","getLastCreatedEntityKey","__getLastCreatedEntityKey","hasText","size","escape","replace","length","createEntity","type","mutability","data","__create","mergeEntityData","toMerge","__mergeData","replaceEntityData","newData","__replaceData","addEntity","instance","__add","getEntity","__get","createFromBlockArray","blocks","theBlocks","Array","isArray","contentBlocks","createFromArray","selectionState","isEmpty","createEmpty","getKey","createFromText","text","undefined","strings","split","ContentBlockNodeRecord","characterList","EMPTY","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nvar BlockMapBuilder = require(\"./BlockMapBuilder\");\n\nvar CharacterMetadata = require(\"./CharacterMetadata\");\n\nvar ContentBlock = require(\"./ContentBlock\");\n\nvar ContentBlockNode = require(\"./ContentBlockNode\");\n\nvar DraftEntity = require(\"./DraftEntity\");\n\nvar SelectionState = require(\"./SelectionState\");\n\nvar generateRandomKey = require(\"./generateRandomKey\");\n\nvar gkx = require(\"./gkx\");\n\nvar Immutable = require(\"immutable\");\n\nvar sanitizeDraftText = require(\"./sanitizeDraftText\");\n\nvar List = Immutable.List,\n    Record = Immutable.Record,\n    Repeat = Immutable.Repeat;\nvar defaultRecord = {\n  entityMap: null,\n  blockMap: null,\n  selectionBefore: null,\n  selectionAfter: null\n};\nvar ContentStateRecord = Record(defaultRecord);\n\nvar ContentState =\n/*#__PURE__*/\nfunction (_ContentStateRecord) {\n  _inheritsLoose(ContentState, _ContentStateRecord);\n\n  function ContentState() {\n    return _ContentStateRecord.apply(this, arguments) || this;\n  }\n\n  var _proto = ContentState.prototype;\n\n  _proto.getEntityMap = function getEntityMap() {\n    // TODO: update this when we fully remove DraftEntity\n    return DraftEntity;\n  };\n\n  _proto.getBlockMap = function getBlockMap() {\n    return this.get('blockMap');\n  };\n\n  _proto.getSelectionBefore = function getSelectionBefore() {\n    return this.get('selectionBefore');\n  };\n\n  _proto.getSelectionAfter = function getSelectionAfter() {\n    return this.get('selectionAfter');\n  };\n\n  _proto.getBlockForKey = function getBlockForKey(key) {\n    var block = this.getBlockMap().get(key);\n    return block;\n  };\n\n  _proto.getKeyBefore = function getKeyBefore(key) {\n    return this.getBlockMap().reverse().keySeq().skipUntil(function (v) {\n      return v === key;\n    }).skip(1).first();\n  };\n\n  _proto.getKeyAfter = function getKeyAfter(key) {\n    return this.getBlockMap().keySeq().skipUntil(function (v) {\n      return v === key;\n    }).skip(1).first();\n  };\n\n  _proto.getBlockAfter = function getBlockAfter(key) {\n    return this.getBlockMap().skipUntil(function (_, k) {\n      return k === key;\n    }).skip(1).first();\n  };\n\n  _proto.getBlockBefore = function getBlockBefore(key) {\n    return this.getBlockMap().reverse().skipUntil(function (_, k) {\n      return k === key;\n    }).skip(1).first();\n  };\n\n  _proto.getBlocksAsArray = function getBlocksAsArray() {\n    return this.getBlockMap().toArray();\n  };\n\n  _proto.getFirstBlock = function getFirstBlock() {\n    return this.getBlockMap().first();\n  };\n\n  _proto.getLastBlock = function getLastBlock() {\n    return this.getBlockMap().last();\n  };\n\n  _proto.getPlainText = function getPlainText(delimiter) {\n    return this.getBlockMap().map(function (block) {\n      return block ? block.getText() : '';\n    }).join(delimiter || '\\n');\n  };\n\n  _proto.getLastCreatedEntityKey = function getLastCreatedEntityKey() {\n    // TODO: update this when we fully remove DraftEntity\n    return DraftEntity.__getLastCreatedEntityKey();\n  };\n\n  _proto.hasText = function hasText() {\n    var blockMap = this.getBlockMap();\n    return blockMap.size > 1 || // make sure that there are no zero width space chars\n    escape(blockMap.first().getText()).replace(/%u200B/g, '').length > 0;\n  };\n\n  _proto.createEntity = function createEntity(type, mutability, data) {\n    // TODO: update this when we fully remove DraftEntity\n    DraftEntity.__create(type, mutability, data);\n\n    return this;\n  };\n\n  _proto.mergeEntityData = function mergeEntityData(key, toMerge) {\n    // TODO: update this when we fully remove DraftEntity\n    DraftEntity.__mergeData(key, toMerge);\n\n    return this;\n  };\n\n  _proto.replaceEntityData = function replaceEntityData(key, newData) {\n    // TODO: update this when we fully remove DraftEntity\n    DraftEntity.__replaceData(key, newData);\n\n    return this;\n  };\n\n  _proto.addEntity = function addEntity(instance) {\n    // TODO: update this when we fully remove DraftEntity\n    DraftEntity.__add(instance);\n\n    return this;\n  };\n\n  _proto.getEntity = function getEntity(key) {\n    // TODO: update this when we fully remove DraftEntity\n    return DraftEntity.__get(key);\n  };\n\n  ContentState.createFromBlockArray = function createFromBlockArray( // TODO: update flow type when we completely deprecate the old entity API\n  blocks, entityMap) {\n    // TODO: remove this when we completely deprecate the old entity API\n    var theBlocks = Array.isArray(blocks) ? blocks : blocks.contentBlocks;\n    var blockMap = BlockMapBuilder.createFromArray(theBlocks);\n    var selectionState = blockMap.isEmpty() ? new SelectionState() : SelectionState.createEmpty(blockMap.first().getKey());\n    return new ContentState({\n      blockMap: blockMap,\n      entityMap: entityMap || DraftEntity,\n      selectionBefore: selectionState,\n      selectionAfter: selectionState\n    });\n  };\n\n  ContentState.createFromText = function createFromText(text) {\n    var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /\\r\\n?|\\n/g;\n    var strings = text.split(delimiter);\n    var blocks = strings.map(function (block) {\n      block = sanitizeDraftText(block);\n      var ContentBlockNodeRecord = gkx('draft_tree_data_support') ? ContentBlockNode : ContentBlock;\n      return new ContentBlockNodeRecord({\n        key: generateRandomKey(),\n        text: block,\n        type: 'unstyled',\n        characterList: List(Repeat(CharacterMetadata.EMPTY, block.length))\n      });\n    });\n    return ContentState.createFromBlockArray(blocks);\n  };\n\n  return ContentState;\n}(ContentStateRecord);\n\nmodule.exports = ContentState;"]},"metadata":{},"sourceType":"script"}