{"ast":null,"code":"import jwtDecode from 'jwt-decode';\nimport { Cookies } from 'react-cookie';\n/**\n * Checks if user is authenticated\n */\n\nconst isUserAuthenticated = () => {\n  const user = getLoggedInUser();\n\n  if (!user) {\n    return false;\n  }\n\n  const decoded = jwtDecode(user.token);\n  const currentTime = Date.now() / 1000;\n\n  if (decoded.exp < currentTime) {\n    console.warn('access token expired');\n    return false;\n  } else {\n    return true;\n  }\n};\n/**\n * Returns the logged in user\n */\n\n\nconst getLoggedInUser = () => {\n  const cookies = new Cookies();\n  const user = cookies.get('user');\n  return user ? typeof user == 'object' ? user : JSON.parse(user) : null;\n};\n\nexport { isUserAuthenticated, getLoggedInUser };","map":{"version":3,"sources":["/Users/jessebarnes/expenseMaster/frontend/src/helpers/authUtils.js"],"names":["jwtDecode","Cookies","isUserAuthenticated","user","getLoggedInUser","decoded","token","currentTime","Date","now","exp","console","warn","cookies","get","JSON","parse"],"mappings":"AACA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,cAAxB;AAEA;;;;AAGA,MAAMC,mBAAmB,GAAG,MAAM;AAC9B,QAAMC,IAAI,GAAGC,eAAe,EAA5B;;AACA,MAAI,CAACD,IAAL,EAAW;AACP,WAAO,KAAP;AACH;;AACD,QAAME,OAAO,GAAGL,SAAS,CAACG,IAAI,CAACG,KAAN,CAAzB;AACA,QAAMC,WAAW,GAAGC,IAAI,CAACC,GAAL,KAAa,IAAjC;;AACA,MAAIJ,OAAO,CAACK,GAAR,GAAcH,WAAlB,EAA+B;AAC3BI,IAAAA,OAAO,CAACC,IAAR,CAAa,sBAAb;AACA,WAAO,KAAP;AACH,GAHD,MAGO;AACH,WAAO,IAAP;AACH;AACJ,CAbD;AAeA;;;;;AAGA,MAAMR,eAAe,GAAG,MAAM;AAC1B,QAAMS,OAAO,GAAG,IAAIZ,OAAJ,EAAhB;AACA,QAAME,IAAI,GAAGU,OAAO,CAACC,GAAR,CAAY,MAAZ,CAAb;AACA,SAAOX,IAAI,GAAI,OAAOA,IAAP,IAAe,QAAf,GAA0BA,IAA1B,GAAiCY,IAAI,CAACC,KAAL,CAAWb,IAAX,CAArC,GAAyD,IAApE;AACH,CAJD;;AAMA,SAASD,mBAAT,EAA8BE,eAA9B","sourcesContent":["// @flow\nimport jwtDecode from 'jwt-decode';\nimport { Cookies } from 'react-cookie';\n\n/**\n * Checks if user is authenticated\n */\nconst isUserAuthenticated = () => {\n    const user = getLoggedInUser();\n    if (!user) {\n        return false;\n    }\n    const decoded = jwtDecode(user.token);\n    const currentTime = Date.now() / 1000;\n    if (decoded.exp < currentTime) {\n        console.warn('access token expired');\n        return false;\n    } else {\n        return true;\n    }\n};\n\n/**\n * Returns the logged in user\n */\nconst getLoggedInUser = () => {\n    const cookies = new Cookies();\n    const user = cookies.get('user');\n    return user ? (typeof user == 'object' ? user : JSON.parse(user)) : null;\n};\n\nexport { isUserAuthenticated, getLoggedInUser };\n"]},"metadata":{},"sourceType":"module"}